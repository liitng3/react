{"version":3,"sources":["Todolist/Todoinput.js","Todolist/Todoitem.js","Todolist/Todolist.js","index.js"],"names":["Todoinput","handleinput","e","keyCode","props","add","target","value","bind","placeholder","onKeyDown","this","type","Component","Todoitem","delItem","idx","del","changeItem","change","todo","count1","map","checked","key","onChange","data","onClick","count2","Todolist","addItem","todoList","state","push","setState","ls","setItem","JSON","stringify","splice","checkboxChage","todolist","gettodoingCount","todoingCount","len","length","i","gettodoneCount","todoneCount","localStorage","parse","getItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55191766.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Todoinput extends Component {\r\n/**大括号里是js环境 */\r\n  constructor(){\r\n      super();\r\n      this.handleinput=this.handleinput.bind(this);\r\n      \r\n\r\n  }\r\n  handleinput=(e)=>{        \r\n    if(e.keyCode===13){\r\n      this.props.add(e.target.value);\r\n      e.target.value='';\r\n    }  \r\n  }   \r\n            \r\n  render(){\r\n    return (\r\n      <div>\r\n        <input placeholder=\"添加ToDo\"  onKeyDown={this.handleinput}  type='text'/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n  \r\n\r\n// 受控组件：\r\n// 1、给input标签添加value属性，赋值为state的值\r\n// 2、给input标签绑定onChange事件，\r\n// 在事件处理函数中setState\r\n// 3、一个事件处理函数控制多个表单元素时，\r\n// 给input标签加上name属性,事件处理函数中写：\r\n// setState({[e.target.name]:e.target.value})","import React, { Component } from 'react';\r\nimport PropTypes from  'prop-types';\r\n\r\nexport default class Todoitem extends Component {\r\n  delItem=(idx,e)=>{\r\n    this.props.del(idx);\r\n  }\r\n  changeItem=(idx,e)=>{\r\n    this.props.change(idx);\r\n  }\r\n  render() {\r\n    var {todo}=this.props;\r\n    return (\r\n      // <div>\r\n      //   <ul>\r\n      //     {\r\n      //       todo.map((item,idx)=>{    //map会返回一个数组\r\n      //           return <li key={idx}>{item}<input checked=\"checked\" onClick={(e)=>this.props.del(idx,e)}/>-----<button onClick={(e)=>this.props.del(idx,e)}>删除</button></li>\r\n      //       })\r\n      //     }     \r\n      //   </ul>\r\n      //   <ul>\r\n          \r\n      //   </ul>\r\n      // </div>\r\n      <div>\r\n      <h2>正在进行:{this.props.count1()}</h2>\r\n      <hr/>\r\n      <ul>\r\n          {\r\n              todo.map((todo,idx) => {\r\n                  if (!todo.checked) {\r\n                      return (\r\n                          <li key={idx}>\r\n                              <input type=\"checkbox\" checked={todo.checked}\r\n                                     onChange={(e)=>this.props.change(idx,e)}/>\r\n                              {todo.data}\r\n                              -- <button onClick={(e)=>this.props.del(idx,e)}>删除</button>\r\n                          </li>\r\n                      )\r\n                  }\r\n              })\r\n          }\r\n      </ul>\r\n      <h2>已经完成:{this.props.count2()}</h2>\r\n      <hr/>\r\n      <ul>\r\n          {\r\n            todo.map((todo,idx) => {\r\n                if (todo.checked) {\r\n                    return (\r\n                        <li key={idx}>\r\n                            <input type=\"checkbox\" checked={todo.checked}\r\n                                   onChange={(e)=>this.props.change(idx,e)}/>\r\n                            {todo.data}\r\n                            -- <button onClick={(e)=>this.props.del(idx,e)}>删除</button>\r\n                        </li>\r\n                    )\r\n                }\r\n            })\r\n          }\r\n      </ul>\r\n  </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport Todoinput from './Todoinput';\r\nimport Todoing from './Todoitem';\r\nimport './todo.css';\r\n\r\nexport default class Todolist extends Component {\r\n  constructor(){\r\n      super();\r\n      this.ls = localStorage; \r\n      let todo= JSON.parse(this.ls.getItem('todo'))||[];\r\n      this.state = {\r\n          todo: todo\r\n      }\r\n    }\r\n  addItem=(data)=>{ \r\n    let todoList = this.state.todo;\r\n    todoList.push({\r\n        data: data,\r\n        checked: false\r\n    })\r\n    //改变后的值赋值给list\r\n    this.setState({\r\n      todo: todoList\r\n    },()=>{\r\n      this.ls.setItem('todo', JSON.stringify(this.state.todo)); //将所有的记录再次保存如localStorage中\r\n    });\r\n  }\r\n  delItem=(idx,e)=>{\r\n    let todo=[...this.state.todo];//下面操作TODO，而不要直接操作状态\r\n    todo.splice(idx,1);\r\n    //2.setstate是异步执行\r\n    this.setState({    \r\n        todo:todo\r\n    },()=>{\r\n      this.ls.setItem('todo', JSON.stringify(this.state.todo));\r\n    });\r\n  }\r\n  checkboxChage = (idx) => {\r\n    let todolist = this.state.todo;\r\n    todolist[idx].checked = !todolist[idx].checked;\r\n    this.setState({\r\n        todo:todolist\r\n    },()=>{\r\n      this.ls.setItem('todo', JSON.stringify(this.state.todo)); //将所有的记录再次保存如localStorage中\r\n    });\r\n  }\r\n  gettodoingCount= (e) => {\r\n    let todoingCount=0;\r\n    var len=this.state.todo.length;\r\n    for(var i=0;i<len;i++){\r\n      if(this.state.todo[i].checked==false){\r\n        todoingCount++;\r\n      }\r\n    }\r\n    return todoingCount;\r\n  }\r\n  gettodoneCount= (e) => {\r\n    let todoneCount=0;\r\n    var len=this.state.todo.length;\r\n    for(var i=0;i<len;i++){\r\n      if(this.state.todo[i].checked==true){\r\n        todoneCount++;\r\n      }\r\n    }\r\n    return todoneCount;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Todoinput add={this.addItem}/>     \r\n        <Todoing del={this.delItem} todo={this.state.todo} change={this.checkboxChage} count1={this.gettodoingCount} count2={this.gettodoneCount}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// import React,{Fragment} from 'react';\n// import ReactDOM from 'react-dom';\n// import Showtime from './Showtime.js'\n// import './index.css';\n//import App from './App';\n//import * as serviceWorker from './serviceWorker';\n\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n// var str='react';\n// var ele=<h1 class=\"tit\">hello <p>react</p></h1>;\n// var obj={\n//     type:'h1',\n//     props:{            //props属性\n//         id:\"tit\",\n//         class:\"tit\",\n//         children:[\"hello\"]\n//     }\n\n// }\n// var ele=React.createElement(\"h1\",{id:\"tit\",class:\"tit\"},\"hello\",React.createElement(\"p\",{id:\"t\",class:\"t\"},\"react\"))\n// console.log(ele);\n//ReactDOM.render(ele, document.getElementById('root'));\n\n\n\n// var obj={\n//     type:'h1',\n//     props:{            //props属性\n//         id:\"tit\",\n//         class:\"tit\",\n        \n//     }\n\n// }\n// function render(obj,container){\n//     var ele=document.createElement(obj.type);\n//     for(var item in obj.props){\n//         if(item==='class'){\n//             ele.className=obj.props[item]\n//         }\n//         else{\n//             ele[item]=obj.props[item];    //不可以.item  用中括号才表示item是一个变量\n//         }\n//     }\n//     container.appendChild(ele);\n// }\n// render(obj,document.getElementById(\"root\"));\n\n\n// var obj={\n//     type:'h1',\n//     props:{            //props属性\n//         id:\"tit\",\n//         class:\"tit\",\n//         children:[\"hello\",'react']\n//     }\n\n// }\n// function render(obj,container){\n//     var {type,props}=obj\n//     var ele=document.createElement(type);\n//     for(var item in props){\n//         if(item==='class'){\n//             ele.className=props[item]\n//         }\n//         else if(item==='children'){\n//             for(var i=0;i<props[item].length;i++){\n//                 //ele.innerHTML+=props.children[i];\n//                 var txt=document.createTextNode(props.children[i]);\n//                 ele.appendChild(txt);\n//             }\n//         }\n//         else{\n//             ele[item]=props[item];    //不可以.item  用中括号才表示item是一个变量\n//         }\n//     }\n//     container.appendChild(ele);\n// }\n// render(obj,document.getElementById(\"root\"));\n\n\n\n\n\n\n\n\n\n// //自己封装render\n// var obj={\n//     type:'div',\n//     props:{            //props属性\n//         id:\"tit\",\n//         class:\"tit\",\n//         children:[\"hello\",'react',\n//             {\n//                 type:'h1',\n//                 props:{            //props属性\n//                     id:\"tit\",\n//                     class:\"tit\",\n//                     children:[\"hello\",'react']\n//             }\n        \n//         }]\n//     }\n\n// }\n// function render(obj,container){\n//     var {type,props}=obj\n//     //文档碎片               相当于一个虚拟的节点，承载节点里面的东西\n//     var fragment=document.createDocumentFragment();\n//     var ele=document.createElement(type);\n//     for(var item in props){\n//         if(item==='class'){\n//             ele.className=props[item]\n//         }\n//         else if(item==='children'){\n//             for(var i=0;i<props[item].length;i++){\n//                 //ele.innerHTML+=props.children[i];\n//                 if(typeof props.children[i]==='object'){\n//                     render(props.children[i],ele);\n//                 }else{\n//                     var txt=document.createTextNode(props.children[i]);\n//                     ele.appendChild(txt);\n//                 }\n//             }\n//         }\n//         else{\n//             ele[item]=props[item];    //不可以.item  用中括号才表示item是一个变量\n//         }\n//     }\n//     fragment.appendChild(ele)\n//     container.appendChild(fragment);\n// }\n// //render(obj,document.getElementById(\"root\"));\n\n// //页面渲染过程\n// //请求HTML页面、浏览器HTML解析器解析成HTML文件，生成dom树\n// //link引入CSS文件、CSS解析器解析CSS，生成CSS对象模型，CSSOM和DOM tree结合生成一个渲染书render tree\n\n\n// //页面回流（重排reflow）：DOM结构(删除增加)发生变化、内容变化、大小位置的变化、显示的变化(display，none)就会把页面重新解析渲染一遍(渲染过程如上),消耗性能，回流的代价很大\n// //页面重绘（repaint）：颜色的变化(背景色、字体颜色、边框颜色)只会把这一小部分再渲染一遍\n\n\n\n// //1.dom结构发生变化-----------先用变量进行DOM处理，最后一次渲染\n\n// //会引起很多次回流，造成性能消耗\n// console.time('time');\n// var div=document.getElementById(\"root\");\n// var str=''\n// for(var i=0;i<1000;i++){\n//     div.innerHTML+='<p>'+i+'</p>';\n// }\n// console.timeEnd('time');\n\n// //下面只会引起一次回流\n// console.time('time');\n// var div=document.getElementById(\"root\");\n// var str=''\n// for(var i=0;i<1000;i++){\n//     str+='<p>'+i+'</p>';\n// }\n// div.innerHTML=str;\n// console.timeEnd('time');\n\n\n// //2.对于样式的处理\n\n// //会引起很2次回流和1次重绘，造成性能消耗\n// var div=document.getElementById(\"root\");\n// div.style.width='100px';\n// div.style.height='100px';\n// div.style.backgroundColor='red';\n\n// //下面只会引起一次回流和重绘\n// var div=document.getElementById(\"root\");\n// div.className='active';\n\n\n\n// //3.offsetLeft/offsetWidth等都会引起回流   尽量少些使用\n// console.log(div.offsetLeft);\n\n// //会引起多次回流，消耗性能\n// var wid=div.offsetWidth\n// setInterval(()=>{\n//     wid+=1;\n//     div.style.width=wid+'px';\n// },100)\n\n// //减少回流\n// var wid=div.offsetWidth\n// setInterval(()=>{\n//     wid+=1;\n//     div.style.width=wid+'px';\n// },100)\n\n\n// //4.文档碎片(内存中的一个变量)\n\n\n\n// //显示当前系统时间\n// function showTime(){\n//     var ele= <div>{new Date().toLocaleString()}</div>;\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n// }\n// showTime();\n// setInterval(showTime,1000);\n\n\n\n// //函数声明组件\n// function Showtime(props){\n//     console.log(props);\n//     //return 中只可以最终返回一个封闭标签   如下会出错\n//     // return (                           \n//     //     <div></div>\n//     //     <div>\n//     //         {props.name}{new Date().toLocaleString()}\n//     //     </div>\n//     // )\n\n//     // return (<div>                            \n//     //         <div></div>\n//     //         <div>\n//     //             {props.name}{new Date().toLocaleString()}\n//     //         </div>\n//     //         </div>\n//     //     )\n\n\n//     //这样节省了DOM节点的使用\n//     return (<Fragment>             \n//         <div>{props.name}</div>\n//         <div>{new Date().toLocaleString()}</div>\n//         </Fragment>  \n//     )\n    \n// }\n\n\n// var num=[1,2,3,4,5];\n// ReactDOM.render(\n//     <Showtime name=\"zhangsan\" age={num}/>,     //引用变量要用大括号\n//     document.getElementById(\"root\")\n// );\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\nimport React,{Fragment,Component} from 'react';\nimport ReactDOM from 'react-dom';\n// import ShowTime from './Showtime';    //引用js文件时可以省略.js    其他文件不可以\n// import './index.css';\nimport Todolist from './Todolist/Todolist';\n// import Request from './Request'\n// import Parent from './Context/Parent';\n// import {con,con2} from \"./Context/Context\";\n// import Hoc from \"./Hoc/Hoc\";\n// import ParentPortal from \"./Portal/ParentPortal\";\n// import App from \"./App\";\n// import './index.css';\nReactDOM.render(\n    <Todolist/>,\n    document.getElementById('root')\n)\n// ReactDOM.render(\n//     <Request/>,\n//     document.getElementById('root')\n// )\n\n\n// let id=1234;\n// 向子组件里传数据（index向child里传id），也就是子组件调用父组件，跨层调用可用context\n// Context:\n// 1、生成Context，可写在一个js文件中，export导出\n// 2、在根组件import Provider，并配置Provider，加上value属性\n// 3、在需要获取数据的组件，import Consumer并配置Consumer\n// Consumer组件里是个函数，函数的参数是传过来的value值\n// ReactDOM.render(\n//     <con.Provider value={id}>\n//         <Parent/>\n//     </con.Provider>,\n//     document.getElementById('root')           \n// )\n// let id = 1234;\n// ReactDOM.render(\n//     <con.Provider value={id}>\n//         <div>ddd</div>\n        \n//         <con2.Provider value='aaaa'>\n//             <Parent />\n//         </con2.Provider>\n//     </con.Provider>,\n//     document.getElementById('root')\n// )\n// ReactDOM.render(\n//     <Hoc/>,\n//     document.getElementById('root')           \n// )\n// ReactDOM.render(\n//     <ParentPortal/>,\n//     document.getElementById('root')           \n// )\n// ReactDOM.render(\n//     <App/>,\n//     document.getElementById('root')           \n// )\n\n//***************************组件的首字母一定要大写，创建文件名称时要注意***************************\n//                           组件才有生命周期                               \n\n// 函数声明组件\n// function ShowTime(props){\n//     console.log(props);\n//     return (<Fragment>\n//                 <div>{props.name}{props.age}</div>\n//                 <div>\n//                     {new Date().toLocaleString()}\n//                 </div>\n//             </Fragment>\n//         )\n// }\n\n// 类定义组件\n\n\n// var num = [1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"zhangsan\"/>,\n//     document.getElementById('root')\n// )\n\n\n\n\n\n// 显示当前系统时间\n// function showTime(){\n//     var ele = <div>\n//                 <p>当前时间是：</p>\n//                 <div>{new Date().toLocaleString()}</div>;\n//             </div>;\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n// } \n// showTime();\n// setInterval(showTime,1000);\n\n\n\n\n\n// react技术栈\n// jsx语法\n// var ele = <h1 class=\"tit\">hello <p>react</p></h1>;\n// babel编译，返回一个对象\n// var ele = React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'t',class:'tit'},\n//         'react')\n// );\n// ReactDOM.render(ele, document.getElementById('root'));\n// 自己封装render函数\n// var obj = {\n//     type: 'div',\n//     props: {\n//         id: 'box',\n//         class: 'box',\n//         children: [\n//             'hello',\n//             'react',\n//             {\n//                 type: 'h1',\n//                 props: {\n//                     id: 'tit',\n//                     class: 'tit',\n//                     children: [\n//                         'title',\n//                         'react'\n//                     ]\n//                 }\n//             }\n//         ]\n//     }\n// }\n// function render(obj,container){\n//     var {type,props} = obj;\n//     // 文档碎片\n//     var fragment = document.createDocumentFragment();\n\n//     var ele = document.createElement(type);\n//     for(var item in props){\n//         if(item === 'class'){\n//             ele.className = props[item]\n//         }else if(item === 'children'){\n//             for(var i=0;i<props.children.length;i++){\n//                 // ele.innerHTML += props.children[i];\n//                 if(typeof props.children[i] === 'object'){\n//                     render(props.children[i],ele);\n//                 }else{\n//                     var txt = document.createTextNode(props.children[i]);\n//                     ele.appendChild(txt);\n//                 }\n//             }\n//         }else{\n//             ele[item] = props[item];\n//         }\n//     }\n//     fragment.appendChild(ele);\n//     container.appendChild(fragment);\n// }\n// render(obj,document.getElementById('root'));\n// 页面渲染过程\n// 请求HTML页面、浏览器HTML解析器解析html文件、生成DOM树\n// link引入css文件、css解析器解析CSS，生成CSS对象模型，CSSOM和DOM tree结合生成一个render tree，最后浏览器绘制页面\n\n// 页面回流（重排reflow）：DOM结构变化、内容变化、大小、位置的变化、显示的变化\n// 页面重绘（repaint）：颜色的变化（背景色、字体颜色、边框颜色）\n\n// 1、先用变量进行dom处理，最后一次渲染\n// console.time('time');\n// var div = document.getElementById('root');\n// var str = ''\n// for(var i=0;i<1000;i++){\n//     str += '<p>'+i+'</p>';\n// }\n// div.innerHTML = str;\n// console.timeEnd('time');\n// 2、对于样式处理,声明一个css类\n// var div = document.getElementById('root');\n// div.style.width = '100px';\n// div.style.height = '100px';\n// div.style.background = 'red';\n\n// div.className = 'active';\n// 3、offsetLeft、offsetWidth等都会引起回流，要慎用\n// console.log(div.offsetLeft);\n// var wid = div.offsetWidth;\n// setInterval(()=>{\n//     wid += 1;\n//     div.style.width = wid + 'px';\n// },100)\n// 4、文档碎片（内存中的一个变量）\n\n\n\n//组件交互\n//父组件---->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n//子组件---->父组件：\n"],"sourceRoot":""}